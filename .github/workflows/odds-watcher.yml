name: "Odds watcher"

on:
  schedule:
    - cron: "*/15 * * * *"   # every 15m UTC
  workflow_dispatch:
    inputs:
      slot:
        description: "am / pm / late (optional override)"
        required: false
        default: ""

concurrency:
  group: odds-watcher
  cancel-in-progress: true

jobs:
  watch:
    runs-on: ubuntu-latest
    timeout-minutes: 7
    permissions:
      contents: read
    env:
      API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
      BASE_URL: ${{ vars.BASE_URL || secrets.BASE_URL || 'https://predictscores.vercel.app' }}
      # cooldown and safety caps
      COOLDOWN_MINUTES: 12
    steps:
      - name: Compute slot (Europe/Belgrade)
        id: ctx
        run: |
          set -euo pipefail
          TZZ="Europe/Belgrade"
          H=$(TZ=$TZZ date +%H)
          if [ -n "${{ github.event.inputs.slot }}" ]; then
            SLOT="${{ github.event.inputs.slot }}"
          else
            if   [ "$H" -lt 10 ]; then SLOT="late";
            elif [ "$H" -lt 15 ]; then SLOT="am";
            else                       SLOT="pm"; fi
          fi
          echo "slot=$SLOT" >> "$GITHUB_OUTPUT"
          echo "Slot=$SLOT (Belgrade hour=$H)"

      - name: Warm & read last refresh timestamp (via value-bets-locked)
        id: warm
        run: |
          set -euo pipefail
          OUT=$(curl -fsS -A "gha-odds-watcher/1.2" --connect-timeout 10 --max-time 20 \
                "$BASE_URL/api/value-bets-locked" || echo '{}')
          TS=$(printf "%s" "$OUT" | jq -r 'try .meta.last_odds_refresh.ts catch ""' 2>/dev/null || echo "")
          SRC=$(printf "%s" "$OUT" | jq -r 'try .meta.last_odds_refresh.source catch ""' 2>/dev/null || echo "")
          if [ "$TS" = "null" ] || [ -z "$TS" ]; then
            echo "ts=" >> "$GITHUB_OUTPUT"
            echo "::notice::No freshness marker found; proceeding to refresh."
          else
            echo "ts=$TS" >> "$GITHUB_OUTPUT"
            echo "::notice::Found freshness marker from $SRC â†’ $TS"
          fi

      - name: Enforce cooldown
        id: cool
        run: |
          set -euo pipefail
          TS="${{ steps.warm.outputs.ts }}"
          RAW="${COOLDOWN_MINUTES:-12}"
          if ! [[ "$RAW" =~ ^[0-9]+$ ]]; then RAW=12; fi
          COOLDOWN_SECS=$((RAW*60))
          if [ -n "$TS" ]; then
            if EPOCH=$(date -d "$TS" +%s 2>/dev/null); then
              NOW=$(date -u +%s)
              AGE=$((NOW - EPOCH))
              if [ "$AGE" -lt "$COOLDOWN_SECS" ]; then
                echo "::notice::Cooldown active ($AGE s < $COOLDOWN_SECS s). Skipping refresh."
                echo "skip=true" >> "$GITHUB_OUTPUT"
              else
                echo "skip=false" >> "$GITHUB_OUTPUT"
              fi
            else
              echo "skip=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Refresh odds (bounded)
        if: steps.cool.outputs.skip != 'true'
        run: |
          set -euo pipefail
          SLOT="${{ steps.ctx.outputs.slot }}"
          # IMPORTANT: do NOT force refresh; respect server-side guards
          curl -fsSL --max-time 120 "$BASE_URL/api/cron/refresh-odds?slot=$SLOT"
