name: "Odds watcher"

on:
  schedule:
    - cron: "*/15 * * * *"   # watcher svakih 15 min (UTC)
    - cron: "5 * * * *"      # scheduler svakog sata u :05 (UTC)
  workflow_dispatch:
    inputs:
      slot:
        description: "am / pm / late (opciono ručno preglasavanje)"
        required: false
        default: ""

concurrency:
  group: odds-watcher
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 7
    steps:
      - name: Compute slot and minute (Europe/Belgrade)
        id: ctx
        run: |
          set -euo pipefail
          TZZ="Europe/Belgrade"
          H=$(TZ=$TZZ date +%H)
          M=$(TZ=$TZZ date +%M)
          if [ -n "${{ github.event.inputs.slot }}" ]; then
            SLOT="${{ github.event.inputs.slot }}"
          else
            if   [ "$H" -lt 10 ]; then SLOT=late
            elif [ "$H" -lt 15 ]; then SLOT=am
            else SLOT=pm; fi
          fi
          echo "slot=$SLOT"  >> "$GITHUB_OUTPUT"
          echo "minute=$M"   >> "$GITHUB_OUTPUT"
          echo "Local time $H:$M -> SLOT=$SLOT"

      - name: Resolve BASE URL
        id: base
        env:
          BASE_FROM_VARS: ${{ vars.BASE_URL }}
          BASE_FROM_SECRETS: ${{ secrets.BASE_URL }}
        run: |
          set -euo pipefail
          BASE="${BASE_FROM_VARS:-${BASE_FROM_SECRETS:-https://predictscores.vercel.app}}"
          echo "base=$BASE" >> "$GITHUB_OUTPUT"
          echo "Resolved BASE=$BASE"

      - name: Rebuild KV (always)
        run: |
          set -euo pipefail
          BASE="${{ steps.base.outputs.base }}"
          SLOT="${{ steps.ctx.outputs.slot }}"
          echo "Rebuilding KV for SLOT=$SLOT …"
          curl -fsS \
            -A "gha-odds-watcher/1.1" \
            --connect-timeout 10 \
            --max-time 180 \
            --retry 2 --retry-all-errors --retry-delay 3 --retry-max-time 200 \
            "$BASE/api/cron/rebuild?slot=$SLOT" || true

      - name: Ensure KV has items (self-warm if empty)
        id: warm
        run: |
          set -euo pipefail
          BASE="${{ steps.base.outputs.base }}"
          SLOT="${{ steps.ctx.outputs.slot }}"
          OUT=$(curl -fsS -A "gha-odds-watcher/1.1" --connect-timeout 10 --max-time 30 \
                "$BASE/api/value-bets-locked?slot=$SLOT&n=1" || echo '{}')
          N=$(printf "%s" "$OUT" | jq -r '(.items|length) // 0' 2>/dev/null || echo 0)
          if [ "$N" -eq 0 ]; then
            echo "KV empty -> warm via rebuild + short sleep"
            curl -fsS -A "gha-odds-watcher/1.1" --connect-timeout 10 --max-time 120 \
                 "$BASE/api/cron/rebuild?slot=$SLOT" || true
            sleep 3
          fi
          echo "vb_locked_response_len=$N" >> "$GITHUB_OUTPUT"

      - name: Refresh odds for current slot (always)
        run: |
          set -euo pipefail
          BASE="${{ steps.base.outputs.base }}"
          SLOT="${{ steps.ctx.outputs.slot }}"
          echo "Refreshing odds for SLOT=$SLOT …"
          curl -fsS \
            -A "gha-odds-watcher/1.1" \
            --connect-timeout 10 \
            --max-time 180 \
            --retry 2 --retry-all-errors --retry-delay 3 --retry-max-time 200 \
            "$BASE/api/cron/refresh-odds?slot=$SLOT&force=1" || true

      - name: Done
        run: echo "Done."
