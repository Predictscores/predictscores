name: Snapshots (AM/PM/LATE)

on:
  schedule:
    # SRB 10:00 -> 08:00 UTC
    - cron: "0 8 * * *"
    # SRB 15:00 -> 13:00 UTC
    - cron: "0 13 * * *"
    # SRB 00:00 -> 22:00 UTC (prethodni dan po UTC)
    - cron: "0 22 * * *"
  workflow_dispatch:
    inputs:
      slot:
        description: "Slot to run (auto|am|pm|late)"
        required: false
        default: "auto"
      base:
        description: "Base URL (override)"
        required: false
        default: ""

concurrency:
  group: snapshots-fixed-${{ github.run_id }}-${{ github.event.schedule || 'manual' }}
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Belgrade

    steps:
      - name: Resolve BASE, SLOT, and YMD (Europe/Belgrade)
        id: ctx
        env:
          FALLBACK_BASE: https://predictscores.vercel.app
          INP_SLOT: ${{ inputs.slot }}
          INP_BASE: ${{ inputs.base }}
          SCH: ${{ github.event.schedule }}
        run: |
          set -euo pipefail

          # Base URL
          BASE="$INP_BASE"
          if [ -z "$BASE" ]; then BASE="$FALLBACK_BASE"; fi

          # Slot (if auto)
          if [ "${INP_SLOT:-auto}" != "auto" ]; then
            SLOT="${INP_SLOT}"
          else
            case "$SCH" in
              "0 8 * * *")  SLOT="am"  ;;
              "0 13 * * *") SLOT="pm"  ;;
              "0 22 * * *") SLOT="late";;
              *) # fallback po lokalnom satu
                 H=$(TZ=Europe/Belgrade date +%H)
                 if [ "$H" -lt 10 ]; then SLOT="late";
                 elif [ "$H" -lt 15 ]; then SLOT="am";
                 else SLOT="pm"; fi
                 ;;
            esac
          fi

          YMD=$(TZ=Europe/Belgrade date +%F)

          echo "base=$BASE" >> "$GITHUB_OUTPUT"
          echo "slot=$SLOT" >> "$GITHUB_OUTPUT"
          echo "ymd=$YMD"   >> "$GITHUB_OUTPUT"

          echo "BASE=$BASE"
          echo "SLOT=$SLOT"
          echo "YMD=$YMD"

      # 1) Rebuild (prvi prolaz: povuci mečeve, pokušaj pickove)
      - name: Rebuild snapshot (pass 1)
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
        run: |
          set -euo pipefail
          echo "::group::rebuild-1"
          curl -fsSL "$BASE/api/cron/rebuild?slot=$SLOT&debug=1" | tee /tmp/rebuild-1.json
          echo "::endgroup::"
          sleep 2

      # 2) Refresh odds (posle prvog rebuild-a) + force seed
      - name: Refresh odds (batch, force)
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
        run: |
          set -euo pipefail
          for i in 1 2; do
            echo "::group::refresh-odds [$i]"
            curl -fsSL "$BASE/api/cron/refresh-odds?slot=$SLOT&force=1" | tee "/tmp/refresh-$i.json"
            echo "::endgroup::"
            sleep 3
          done

      # 3) Rebuild (drugi prolaz: sada sa osveženim kvotama/locked)
      - name: Rebuild snapshot (final)
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
        run: |
          set -euo pipefail
          echo "::group::rebuild-2"
          curl -fsSL "$BASE/api/cron/rebuild?slot=$SLOT&debug=1" | tee /tmp/rebuild-2.json
          echo "::endgroup::"
          sleep 2

      # 4) Insights (Zašto…)
      - name: Build insights
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
        run: |
          set -euo pipefail
          echo "::group::insights-build"
          curl -fsSL "$BASE/api/insights-build?slot=$SLOT" | tee /tmp/insights.json
          echo "::endgroup::"

      # 5) Apply learning
      - name: Apply learning
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
        run: |
          set -euo pipefail
          echo "::group::apply-learning"
          curl -fsSL "$BASE/api/cron/apply-learning?slot=$SLOT" | tee /tmp/learn.json
          echo "::endgroup::"

      # 6) Sanity check
      - name: Sanity check (locked feed)
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
        run: |
          set -euo pipefail
          echo "::group::value-bets-locked"
          curl -fsSL "$BASE/api/value-bets-locked?slot=$SLOT&slim=1" | tee /tmp/locked.json
          echo "::endgroup::"
