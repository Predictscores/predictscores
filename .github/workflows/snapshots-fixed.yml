name: Snapshots (AM/PM/LATE)

on:
  schedule:
    # AM 10:00 Europe/Belgrade -> 08:00/09:00 UTC (airbag -2/0/+2)
    - cron: "58 7 * * *"
    - cron: "0 8 * * *"
    - cron: "2 8 * * *"
    - cron: "58 8 * * *"
    - cron: "0 9 * * *"
    - cron: "2 9 * * *"

    # PM 15:00 Europe/Belgrade -> 13:00/14:00 UTC (airbag -2/0/+2)
    - cron: "58 12 * * *"
    - cron: "0 13 * * *"
    - cron: "2 13 * * *"
    - cron: "58 13 * * *"
    - cron: "0 14 * * *"
    - cron: "2 14 * * *"

    # LATE 00:00 Europe/Belgrade -> 22:00/23:00 UTC (prethodni dan) (airbag -2/0/+2)
    - cron: "58 21 * * *"
    - cron: "0 22 * * *"
    - cron: "2 22 * * *"
    - cron: "58 22 * * *"
    - cron: "0 23 * * *"
    - cron: "2 23 * * *"

  workflow_dispatch:
    inputs:
      slot:
        description: "Slot to run (auto|am|pm|late)"
        required: false
        default: "auto"
      base:
        description: "Base URL override (optional)"
        required: false
        default: ""

concurrency:
  group: snapshots-fixed
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest

    env:
      TZ_DISPLAY: Europe/Belgrade
      FALLBACK_BASE: https://predictscores.vercel.app
      # Default guard window (minutes) for slot detection; override via repo variable
      # `SNAPSHOT_GUARD_MINUTES` to tune without editing the workflow.
      FREEZE_MINUTES: ${{ vars.SNAPSHOT_GUARD_MINUTES || '75' }}

    steps:
      - name: Ensure jq is available
        shell: bash
        run: |
          set -euo pipefail
          command -v jq >/dev/null 2>&1 || { sudo apt-get update -y && sudo apt-get install -y jq; }

      - name: Resolve BASE, SLOT, YMD and guard window
        id: ctx
        env:
          INP_BASE: ${{ inputs.base }}
          INP_SLOT: ${{ inputs.slot }}
          SCH: ${{ github.event.schedule }}
          TZD: ${{ env.TZ_DISPLAY }}
        shell: bash
        run: |
          set -euo pipefail

          BASE="${INP_BASE:-}"
          if [ -z "$BASE" ]; then BASE="${FALLBACK_BASE:-}"; fi

          if [ "${INP_SLOT:-auto}" != "auto" ]; then
            SLOT="${INP_SLOT}"
          else
            case "${SCH:-}" in
              "58 7 * * *"|"0 8 * * *"|"2 8 * * *"|"58 8 * * *"|"0 9 * * *"|"2 9 * * *") SLOT="am" ;;
              "58 12 * * *"|"0 13 * * *"|"2 13 * * *"|"58 13 * * *"|"0 14 * * *"|"2 14 * * *") SLOT="pm" ;;
              "58 21 * * *"|"0 22 * * *"|"2 22 * * *"|"58 22 * * *"|"0 23 * * *"|"2 23 * * *") SLOT="late" ;;
              *)
                H=$(TZ="${TZD:-Europe/Belgrade}" date +%H)
                if   [ "$H" -lt 10 ]; then SLOT="late"
                elif [ "$H" -lt 15 ]; then SLOT="am"
                else                        SLOT="pm"
                fi
                ;;
            esac
          fi

          YMD=$(TZ="${TZD:-Europe/Belgrade}" date +%F)

          FM=${FREEZE_MINUTES:-75}
          if ! [[ "$FM" =~ ^[0-9]+$ ]]; then
            echo "::warning::FREEZE_MINUTES ('$FM') is not an integer, falling back to 75"
            FM=75
          fi
          now_hm=$(TZ="${TZD:-Europe/Belgrade}" date +%H:%M)
          H=${now_hm%%:*}; M=${now_hm##*:}
          m=$((10#$H*60 + 10#$M))
          mod=1440

          circ_dist () {
            local a b d e
            a=${1:-0}; b=${2:-0}
            d=$(( (a - b) % mod ))
            (( d < 0 )) && d=$((d + mod))
            e=$(( mod - d ))
            if (( d < e )); then echo "$d"; else echo "$e"; fi
          }

          t_late=0
          t_am=$((10*60))
          t_pm=$((15*60))
          d_late=$(circ_dist "$m" "$t_late")
          d_am=$(circ_dist "$m" "$t_am")
          d_pm=$(circ_dist "$m" "$t_pm")

          run_guard=false
          case "$SLOT" in
            late) (( d_late <= FM )) && run_guard=true ;;
            am)   (( d_am   <= FM )) && run_guard=true ;;
            pm)   (( d_pm   <= FM )) && run_guard=true ;;
          esac

          echo "Guard decision: run=$run_guard (slot=$SLOT, now=$now_hm, guard_minutes=$FM, schedule=${SCH:-workflow_dispatch})"

          {
            echo "run=$run_guard"
            echo "base=$BASE"
            echo "slot=$SLOT"
            echo "ymd=$YMD"
            echo "guard_minutes=$FM"
          } >> "$GITHUB_OUTPUT"

      # 0) Warm — PRIVREMENO ISKLJUČEN da ne piše dnevni tickets:<ymd>
      - name: Warm locked-floats (daily tickets & base snapshot)
        if: ${{ false }}   # <— jedina funkcionalna promena u fajlu
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
          YMD:  ${{ steps.ctx.outputs.ymd }}
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL "$BASE/api/locked-floats?warm=1&slot=$SLOT&ymd=$YMD" || true

      # 1) Rebuild (pass 1)
      - name: Rebuild snapshot (pass 1)
        if: steps.ctx.outputs.run == 'true'
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
          YMD:  ${{ steps.ctx.outputs.ymd }}
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL "$BASE/api/cron/rebuild?slot=$SLOT&ymd=$YMD&debug=1" | tee /tmp/rebuild-1.json
          sleep 2

      # 2) Refresh odds (kratko, batch ×2)
      - name: Refresh odds (batch, force)
        if: steps.ctx.outputs.run == 'true'
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
          YMD:  ${{ steps.ctx.outputs.ymd }}
        shell: bash
        run: |
          set -euo pipefail
          for i in 1 2; do
            curl -fsSL "$BASE/api/cron/refresh-odds?slot=$SLOT&ymd=$YMD&force=1" | tee "/tmp/refresh-$i.json"
            sleep 3
          done

      # 3) Rebuild (final)
      - name: Rebuild snapshot (final)
        if: steps.ctx.outputs.run == 'true'
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
          YMD:  ${{ steps.ctx.outputs.ymd }}
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL "$BASE/api/cron/rebuild?slot=$SLOT&ymd=$YMD&debug=1" | tee /tmp/rebuild-2.json
          sleep 2

      # 4) Insights (grupiše specijale i zamrzava po slotu)
      - name: Build insights (tickets)
        if: steps.ctx.outputs.run == 'true'
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
          YMD:  ${{ steps.ctx.outputs.ymd }}
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL "$BASE/api/insights-build?slot=$SLOT&ymd=$YMD" | tee /tmp/insights.json

      # 5) Apply learning
      - name: Apply learning
        if: steps.ctx.outputs.run == 'true'
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
          YMD:  ${{ steps.ctx.outputs.ymd }}
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL "$BASE/api/cron/apply-learning?slot=$SLOT&ymd=$YMD" | tee /tmp/learn.json

      # 6) Sanity check
      - name: Sanity check (locked feed)
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
          YMD:  ${{ steps.ctx.outputs.ymd }}
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL "$BASE/api/value-bets-locked?slot=$SLOT&ymd=$YMD&slim=1" | tee /tmp/locked.json
