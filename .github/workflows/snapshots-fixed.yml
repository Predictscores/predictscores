name: Snapshots (AM/PM/LATE)

on:
  schedule:
    # SRB 10:00 -> 08:00 UTC
    - cron: "0 8 * * *"
    # SRB 15:00 -> 13:00 UTC
    - cron: "0 13 * * *"
    # SRB 00:00 -> 22:00 UTC (prethodni dan po UTC)
    - cron: "0 22 * * *"
  workflow_dispatch:
    inputs:
      slot:
        description: "Slot to run (auto|am|pm|late)"
        required: false
        default: "auto"
        type: choice
        options: [auto, am, pm, late]
      base:
        description: "Override base URL (optional)"
        required: false
        default: ""
        type: string

jobs:
  snapshots:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Belgrade

    steps:
      - name: Resolve BASE, SLOT, and YMD (Europe/Belgrade)
        id: ctx
        env:
          FALLBACK_BASE: https://predictscores.vercel.app
          INP_SLOT: ${{ inputs.slot }}
          INP_BASE: ${{ inputs.base }}
          SCH: ${{ github.event.schedule }}
        run: |
          set -euo pipefail

          # Base URL
          BASE="${INP_BASE:-}"
          if [ -z "$BASE" ]; then
            BASE="${FALLBACK_BASE}"
          fi
          echo "BASE=$BASE"
          echo "base=$BASE" >> "$GITHUB_OUTPUT"

          # Determine slot
          SLOT=""
          if [ -n "${INP_SLOT:-}" ] && [ "${INP_SLOT}" != "auto" ]; then
            SLOT="${INP_SLOT}"
          elif [ -n "${SCH:-}" ]; then
            case "$SCH" in
              "0 8 * * *")  SLOT="am"  ;;  # 10:00 SRB
              "0 13 * * *") SLOT="pm"  ;;  # 15:00 SRB
              "0 22 * * *") SLOT="late";;  # 00:00 SRB
              *)            SLOT="am"  ;;
            esac
          else
            HOUR=$(TZ=Europe/Belgrade date +%H)
            if   [ "$HOUR" -lt 10 ]; then SLOT="late"
            elif [ "$HOUR" -lt 15 ]; then SLOT="am"
            else SLOT="pm"
            fi
          fi
          echo "SLOT=$SLOT"
          echo "slot=$SLOT" >> "$GITHUB_OUTPUT"

          # Local date (SRB)
          YMD=$(TZ=Europe/Belgrade date +%F)
          echo "YMD=$YMD"
          echo "ymd=$YMD" >> "$GITHUB_OUTPUT"

      - name: Refresh odds (batch)
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
        run: |
          set -euo pipefail
          for i in 1 2; do
            echo "::group::refresh-odds [$i]"
            curl -fsSL "$BASE/api/cron/refresh-odds?slot=$SLOT" | tee "/tmp/refresh-$i.json"
            echo "::endgroup::"
            sleep 3
          done

      - name: Rebuild snapshot
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
        run: |
          set -euo pipefail
          echo "::group::rebuild"
          curl -fsSL "$BASE/api/cron/rebuild?slot=$SLOT" | tee /tmp/rebuild.json
          echo "::endgroup::"

      - name: Build insights (why bullets)
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
        run: |
          set -euo pipefail
          echo "::group::insights-build"
          curl -fsSL "$BASE/api/insights-build?slot=$SLOT" | tee /tmp/insights.json
          echo "::endgroup::"

      - name: Apply learning
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
        run: |
          set -euo pipefail
          echo "::group::apply-learning"
          curl -fsSL "$BASE/api/cron/apply-learning?slot=$SLOT" | tee /tmp/learn.json
          echo "::endgroup::"

      - name: Sanity check (locked feed)
        env:
          BASE: ${{ steps.ctx.outputs.base }}
          SLOT: ${{ steps.ctx.outputs.slot }}
        run: |
          set -euo pipefail
          echo "::group::value-bets-locked"
          curl -fsSL "$BASE/api/value-bets-locked?slot=$SLOT&slim=1" | tee /tmp/locked.json
          echo "::endgroup::"
